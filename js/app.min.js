const BLOCK_WIDTH=101,BLOCK_HEIGHT=83,BLOCK_HEIGHT_OFFSET=50,FIELD_TOP=BLOCK_HEIGHT_OFFSET,FIELD_LEFT=0,FIELD_BOTTOM=400,FIELD_RIGHT=400;function randomInteger(e,t){return Math.floor(Math.random()*(t-e+1)+e)}function toggleAvatarSelection(e){e?($("input[name=player]").prop("disabled",!1),$("label > input + img").css("cursor","pointer")):($("input[name=player]").prop("disabled",!0),$("label > input + img").css("cursor","default"))}class GamePiece{piece(e){this.sprite=e.sprite,this.width=e.width,this.height=e.height}xCoord(e,t){var i=randomInteger(e,t)*BLOCK_WIDTH;this.x=i+(BLOCK_WIDTH-this.width)/2}yCoord(e,t){var i=randomInteger(e,t)*BLOCK_HEIGHT;this.y=BLOCK_HEIGHT_OFFSET+i+(BLOCK_HEIGHT-this.height)/2}setPerimeter(){this.perimeter={top:this.y,left:this.x,bottom:this.y+this.height,right:this.x+this.width}}render(){ctx.drawImage(Resources.get(this.sprite),this.x,this.y)}hit(e){let t=!1;return this.perimeter&&e.perimeter&&(t=this.perimeter.left<e.perimeter.right&&this.perimeter.right>e.perimeter.left&&this.perimeter.top<e.perimeter.bottom&&this.perimeter.bottom>e.perimeter.top),t}}const avatars=[{id:"char-boy",sprite:"images/char-boy.png",width:67,height:77},{id:"char-cat-girl",sprite:"images/char-cat-girl.png",width:68,height:76},{id:"char-horn-girl",sprite:"images/char-horn-girl.png",width:67,height:77},{id:"char-pink-girl",sprite:"images/char-pink-girl.png",width:68,height:76},{id:"char-princess-girl",sprite:"images/char-princess-girl.png",width:68,height:78}];class Player extends GamePiece{constructor(e){super(),toggleAvatarSelection(!1);let t={};if(void 0!==e&&e)t=avatars.find(t=>t.id===e);else{const e=randomInteger(1,avatars.length)-1;$(`input[name=player]:eq(${e})`).prop("checked",!0),t=avatars[e]}this.piece(t),this.score=0,this.lives=3,this.reset()}reset(){this.xCoord(0,4),this.yCoord(5,5),this.setPerimeter(),this.tokenPoints=0,this.tokenLives=0}update(){return this.lives<1?(this.gameOver(),0):(this.y<FIELD_TOP&&(this.updateScore(1+this.tokenPoints),this.updateLives(this.tokenLives),this.reset()),this.setPerimeter(),1)}handleInput(e){switch(e){case"up":this.y-=this.y>FIELD_TOP?BLOCK_HEIGHT:0;break;case"left":this.x-=this.x-BLOCK_WIDTH>FIELD_LEFT?BLOCK_WIDTH:0;break;case"down":this.y+=this.y<FIELD_BOTTOM?BLOCK_HEIGHT:0;break;case"right":this.x+=this.x<FIELD_RIGHT?BLOCK_WIDTH:0}}updateScore(e){this.score+=e,$("#score").text(this.score)}updateLives(e){const t=Math.min(this.lives+e,5);this.lives=t,$("img.life").each((e,i)=>{e<t?$(i).removeClass("inactive"):$(i).addClass("inactive")})}gameOver(){$("#score").text(`Your Score: ${this.score}`)}}let player=new Player;const enemies=[{sprite:"images/enemy-bug.png",width:99,height:66},{sprite:"images/ladybag.png",width:63,height:66}];class Enemy extends GamePiece{constructor(){super(),this.reset()}reset(){this.piece(enemies[randomInteger(1,enemies.length)-1]),this.xCoord(-3,-1),this.yCoord(1,3),this.speed=randomInteger(75,200)}update(e){this.x+=this.speed*e,this.y+=randomInteger(-1,1)/3,this.setPerimeter(),this.x>FIELD_RIGHT+BLOCK_WIDTH&&this.reset(),this.hit(player)&&(player.updateLives(-1),player.reset())}}const allEnemies=[new Enemy,new Enemy,new Enemy,new Enemy,new Enemy,new Enemy],tokens=[{sprite:"images/Gem Blue.png",width:50,height:54,points:2,lives:0},{sprite:"images/Gem Green.png",width:50,height:54,points:4,lives:0},{sprite:"images/Gem Orange.png",width:50,height:54,points:8,lives:0},{sprite:"images/Key.png",width:50,height:50,points:16,lives:0},{sprite:"images/Star.png",width:29,height:42,points:32,lives:0},{sprite:"images/Heart.png",width:45,height:45,points:0,lives:1}];class Token extends GamePiece{constructor(){super(),this.reset()}reset(){const e=tokens[randomInteger(1,tokens.length)-1];this.piece(e),this.points=e.points,this.lives=e.lives,this.delay=1e4*randomInteger(2,10),this.fadeTime=1e4*randomInteger(5,10),this.alphaDivisor=this.fadeTime,this.xCoord(0,4),this.yCoord(1,3)}update(){this.setPerimeter(),this.delay<=0&&this.hit(player)&&(player.tokenPoints+=this.points,player.tokenLives+=this.lives,this.reset())}render(){this.delay-=100,this.delay<=0&&(this.fadeTime-=100,this.fadeTime<=0?this.reset():(ctx.globalAlpha=this.fadeTime/this.alphaDivisor,GamePiece.prototype.render.call(this),ctx.globalAlpha=1))}}const token=new Token;document.addEventListener("keyup",function(e){player.handleInput({37:"left",38:"up",39:"right",40:"down"}[e.keyCode])}),$(document).ready(function(){toggleAvatarSelection(!0),$("input[name=player]:radio").change(function(){const e=$("input[name=player]:checked").val();player=new Player(e)})});